#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script d'orchestration :
1. Ex√©cute les pipelines Python (oev, ptme et muso) l'un apr√®s l'autre.
2. G√©n√®re les rapports Quarto (fichiers .qmd) correspondants.

Avant de lancer ce script, v√©rifiez que:
- Python est correctement install√© et que les scripts sont pr√©sents
- Quarto est install√© et accessible via la commande 'quarto'
- R est install√© avec les packages requis
"""

import subprocess
import sys
import os
from pathlib import Path

# Liste des scripts Python √† ex√©cuter
pipelines = ["oev_pipeline.py", "ptme_pipeline.py", "muso_pipeline.py", "garden_pipeline.py"]

# Liste des fichiers Quarto √† rendre
qmd_files = ["tracking-oev.qmd", "tracking-ptme.qmd", "tracking-muso.qmd","tracking-gardening.qmd"]

# Packages R requis pour les rapports
required_r_packages = [
    "gsubfn", "DBI", "dplyr", "ggplot2", "knitr", "rmarkdown", 
    "plotly", "DT", "lubridate", "stringr"
]

def check_r_packages():
    """V√©rifie et installe les packages R manquants."""
    print("üîç V√©rification des packages R...")
    
    missing_packages = []
    
    for package in required_r_packages:
        try:
            # V√©rifier si le package est install√©
            result = subprocess.run([
                "Rscript", "-e", 
                f"if (!require('{package}', quietly = TRUE)) quit(status = 1)"
            ], capture_output=True, check=True)
            print(f"‚úÖ Package R '{package}' trouv√©")
            
        except (subprocess.CalledProcessError, FileNotFoundError):
            missing_packages.append(package)
            print(f"‚ùå Package R '{package}' manquant")
    
    # Installer les packages manquants
    if missing_packages:
        print(f"\nüì¶ Installation des packages R manquants: {missing_packages}")
        
        packages_str = "', '".join(missing_packages)
        install_cmd = f"install.packages(c('{packages_str}'), repos='https://cran.rstudio.com/')"
        
        try:
            subprocess.run([
                "Rscript", "-e", install_cmd
            ], check=True)
            print("‚úÖ Packages R install√©s avec succ√®s")
            
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Erreur lors de l'installation des packages R: {e}")
            return False
    
    return True

def check_dependencies():
    """V√©rifie toutes les d√©pendances."""
    print("üîç V√©rification des d√©pendances...\n")
    
    # V√©rifier les fichiers Python
    for script in pipelines:
        if not Path(script).exists():
            print(f"‚ùå Script Python manquant: {script}")
            return False
    print("‚úÖ Scripts Python trouv√©s")
    
    # V√©rifier les fichiers Quarto
    for qmd in qmd_files:
        if not Path(qmd).exists():
            print(f"‚ùå Fichier Quarto manquant: {qmd}")
            return False
    print("‚úÖ Fichiers Quarto trouv√©s")
    
    # V√©rifier Quarto
    try:
        subprocess.run(["quarto", "--version"], capture_output=True, check=True)
        print("‚úÖ Quarto install√©")
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("‚ùå Quarto non install√©")
        return False
    
    # V√©rifier R
    try:
        subprocess.run(["Rscript", "--version"], capture_output=True, check=True)
        print("‚úÖ R install√©")
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("‚ùå R non install√©")
        return False
    
    # V√©rifier et installer les packages R
    if not check_r_packages():
        return False
    
    print("\n‚úÖ Toutes les d√©pendances sont satisfaites\n")
    return True

def run_command(cmd_list, description="", continue_on_error=False):
    """Ex√©cute une commande avec gestion d'erreurs am√©lior√©e."""
    try:
        print(f"üìå {description}: {' '.join(cmd_list)}")
        
        result = subprocess.run(
            cmd_list, 
            check=True,
            capture_output=True,
            text=True,
            encoding='utf-8',
            errors='replace'
        )
        
        print("‚úÖ Termin√© avec succ√®s")
        
        # Afficher la sortie si elle existe
        if result.stdout.strip():
            print(f"üìÑ Sortie: {result.stdout.strip()[:200]}...")
        
        print()
        return True
        
    except subprocess.CalledProcessError as err:
        print(f"‚ùå Erreur lors de l'ex√©cution")
        print(f"   Code d'erreur: {err.returncode}")
        
        if err.stderr:
            print(f"   Erreur: {err.stderr.strip()[:500]}...")
        if err.stdout:
            print(f"   Sortie: {err.stdout.strip()[:500]}...")
        
        print()
        
        if continue_on_error:
            print("‚ö†Ô∏è  Erreur ignor√©e, continuation...\n")
            return False
        else:
            sys.exit(err.returncode)
    
    except Exception as e:
        print(f"‚ùå Erreur inattendue: {e}")
        if not continue_on_error:
            sys.exit(1)
        return False

def run_quarto_with_retry(qmd_file):
    """Ex√©cute Quarto avec retry en cas d'√©chec."""
    print(f"üìä G√©n√©ration du rapport {qmd_file}")
    
    # Premi√®re tentative
    success = run_command(
        ["quarto", "render", qmd_file], 
        f"G√©n√©ration de {qmd_file}",
        continue_on_error=True
    )
    
    if success:
        return True
    
    # Si √©chec et c'est le fichier PTME, essayer avec des options sp√©ciales
    if "ptme" in qmd_file.lower():
        print(f"üîÑ Retry pour {qmd_file} avec options sp√©ciales...")
        
        # Essayer de forcer l'installation des packages dans le document
        try:
            # Cr√©er un script R temporaire pour installer les packages
            temp_r_script = """
# Installation forc√©e des packages requis
packages <- c('gsubfn', 'DBI', 'dplyr', 'ggplot2', 'knitr', 'rmarkdown', 'plotly', 'DT', 'lubridate', 'stringr')
for(pkg in packages) {
  if(!require(pkg, character.only = TRUE, quietly = TRUE)) {
    install.packages(pkg, repos='https://cran.rstudio.com/')
    library(pkg, character.only = TRUE)
  }
}
"""
            
            with open("temp_install_packages.R", "w") as f:
                f.write(temp_r_script)
            
            print("üì¶ Installation forc√©e des packages R...")
            subprocess.run(["Rscript", "temp_install_packages.R"], check=True)
            
            # Nettoyer le fichier temporaire
            os.remove("temp_install_packages.R")
            
            # Retry Quarto
            return run_command(
                ["quarto", "render", qmd_file], 
                f"Retry g√©n√©ration de {qmd_file}",
                continue_on_error=True
            )
            
        except Exception as e:
            print(f"‚ùå Retry √©chou√©: {e}")
            return False
    
    return False

def main():
    """Fonction principale."""
    print("üöÄ D√©but de l'orchestration des pipelines et rapports")
    print(f"üìÅ R√©pertoire de travail: {os.getcwd()}\n")
    
    # V√©rifier les d√©pendances
    if not check_dependencies():
        print("‚ùå √âchec de la v√©rification des d√©pendances")
        sys.exit(1)
    
    # 1. Ex√©cution des scripts Python
    print("=" * 60)
    print("üêç PHASE 1: Ex√©cution des pipelines Python")
    print("=" * 60)
    
    failed_pipelines = []
    
    for script in pipelines:
        success = run_command(
            [sys.executable, script], 
            f"Ex√©cution du pipeline {script}",
            continue_on_error=True
        )
        
        if not success:
            failed_pipelines.append(script)
    
    # 2. G√©n√©ration des rapports Quarto
    print("=" * 60)
    print("üìä PHASE 2: G√©n√©ration des rapports Quarto")
    print("=" * 60)
    
    failed_reports = []
    
    for qmd in qmd_files:
        success = run_quarto_with_retry(qmd)
        
        if not success:
            failed_reports.append(qmd)
    
    # R√©sum√© final
    print("=" * 60)
    print("üìã R√âSUM√â FINAL")
    print("=" * 60)
    
    if failed_pipelines:
        print(f"‚ùå Pipelines √©chou√©s: {failed_pipelines}")
    else:
        print("‚úÖ Tous les pipelines ont r√©ussi")
    
    if failed_reports:
        print(f"‚ùå Rapports √©chou√©s: {failed_reports}")
    else:
        print("‚úÖ Tous les rapports ont √©t√© g√©n√©r√©s")
    
    if failed_pipelines or failed_reports:
        print("\n‚ö†Ô∏è  Ex√©cution termin√©e avec des erreurs")
        sys.exit(1)
    else:
        print("\nüéâ Ex√©cution termin√©e avec succ√®s!")
        sys.exit(0)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n‚ùå Interruption par l'utilisateur (Ctrl+C)")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erreur inattendue: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
