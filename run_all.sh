#!/bin/bash

# ================================
# üöÄ SCRIPT D'EX√âCUTION AUTOMATIQUE
# - 3 scripts Python
# - 3 fichiers Quarto
# - Op√©rations Git automatiques
# - Gestion des erreurs par fichier
# ================================

echo "üîÅ D√©but de l'ex√©cution globale"
echo "üìÖ Date : $(date)"
echo "-------------------------------"

# ========== PYTHON ==========
echo "üêç [1/3] Ex√©cution des scripts Python..."

PY_SCRIPTS=("oev_pipeline.py" "ptme_pipeline.py" "garden_pipeline.py" "muso_pipeline.py")
FAILED_PY=()

for file in "${PY_SCRIPTS[@]}"; do
    echo "‚öôÔ∏è Ex√©cution : $file"
    
    # Remplacer python3 par python (compatible Windows)
    python "$file"
    
    if [ $? -ne 0 ]; then
        echo "‚ùå √âchec : $file"
        FAILED_PY+=("$file")
    else
        echo "‚úÖ Succ√®s : $file"
    fi
done

# ========== QUARTO ==========
echo ""
echo "üìù [2/3] Rendu des fichiers Quarto..."

QMD_FILES=("tracking-ptme.qmd" "tracking-oev.qmd" "tracking-gardening.qmd" "tracking-muso.qmd")
FAILED_QMD=()

for file in "${QMD_FILES[@]}"; do
    echo "üìÑ Rendu : $file"
    quarto render "$file"
    if [ $? -ne 0 ]; then
        echo "‚ùå √âchec : $file"
        FAILED_QMD+=("$file")
    else
        echo "‚úÖ Succ√®s : $file"
    fi
done

# ========== GIT OPERATIONS ==========
echo ""
echo "üìù [3/3] Op√©rations Git..."

# V√©rifier si on est dans un repository Git
if git rev-parse --git-dir > /dev/null 2>&1; then
    echo "‚úÖ Repository Git d√©tect√©"
    
    # Obtenir la date du jour
    DATE_TODAY=$(date +"%Y-%m-%d")
    COMMIT_MESSAGE="Mon commit du $DATE_TODAY"

    # ------ Corrections: commit & push fiables, sans cr√©er _site ------
    # 1) Stager tous les changements (ajouts/suppressions/modifs)
    git add -A
    if [ $? -ne 0 ]; then
        echo "‚ùå √âchec de 'git add -A'"
        FAILED_GIT=true
    else
        echo "‚úÖ git add -A r√©ussi"

        # 2) Commiter uniquement s'il y a des changements index√©s
        if git diff --cached --quiet; then
            echo "‚ÑπÔ∏è Aucun changement √† commiter"
            FAILED_GIT=false
        else
            echo "üíæ Commit avec le message: '$COMMIT_MESSAGE'"
            if git commit -m "$COMMIT_MESSAGE"; then
                echo "‚úÖ Git commit r√©ussi"
                echo "üìù Message: $COMMIT_MESSAGE"
                COMMIT_HASH=$(git rev-parse --short HEAD)
                echo "üîó Hash du commit: $COMMIT_HASH"

                # 3) Push automatique (avec -u si aucun upstream n'est d√©fini)
                CURRENT_BRANCH=$(git symbolic-ref --short HEAD 2>/dev/null)
                if [ -z "$CURRENT_BRANCH" ]; then
                    CURRENT_BRANCH="main"
                fi

                if git rev-parse --abbrev-ref --symbolic-full-name @{u} >/dev/null 2>&1; then
                    # Upstream existe d√©j√†
                    if git push; then
                        echo "‚úÖ git push r√©ussi (upstream existant)"
                        FAILED_GIT=false
                    else
                        echo "‚ùå √âchec de 'git push'"
                        FAILED_GIT=true
                    fi
                else
                    # Pas d'upstream ‚Üí on le cr√©e
                    if git push -u origin "$CURRENT_BRANCH"; then
                        echo "‚úÖ git push r√©ussi (upstream d√©fini sur origin/$CURRENT_BRANCH)"
                        FAILED_GIT=false
                    else
                        echo "‚ùå √âchec de 'git push -u origin $CURRENT_BRANCH'"
                        FAILED_GIT=true
                    fi
                fi
            else
                echo "‚ùå √âchec du git commit"
                FAILED_GIT=true
            fi
        fi
    fi
    # ------ Fin corrections ------
else
    echo "‚ö†Ô∏è Pas un repository Git - op√©rations Git ignor√©es"
    echo "üí° Pour initialiser un repo Git, ex√©cutez: git init"
    FAILED_GIT=false  # Pas une vraie erreur
fi

# ========== RAPPORT FINAL ==========
echo ""
echo "==============================="
echo "üìã RAPPORT D'EX√âCUTION FINALE"
echo "==============================="

# Compter les succ√®s et √©checs
TOTAL_SUCCESS=true

if [ ${#FAILED_PY[@]} -eq 0 ] && [ ${#FAILED_QMD[@]} -eq 0 ] && [ "$FAILED_GIT" != true ]; then
    echo "üéâ Tous les processus ont √©t√© ex√©cut√©s avec succ√®s!"
    echo ""
    echo "üìä R√©sum√©:"
    echo "   ‚úÖ Scripts Python: ${#PY_SCRIPTS[@]} r√©ussis"
    echo "   ‚úÖ Fichiers Quarto: ${#QMD_FILES[@]} rendus"
    echo "   ‚úÖ Op√©rations Git: termin√©es"
else
    TOTAL_SUCCESS=false
    echo "‚ö†Ô∏è Certains processus ont √©chou√©:"
    echo ""
    
    if [ ${#FAILED_PY[@]} -gt 0 ]; then
        echo "‚ùå Scripts Python √©chou√©s (${#FAILED_PY[@]}/${#PY_SCRIPTS[@]}):"
        for f in "${FAILED_PY[@]}"; do echo "   - $f"; done
        echo ""
    else
        echo "‚úÖ Scripts Python: tous r√©ussis (${#PY_SCRIPTS[@]}/${#PY_SCRIPTS[@]})"
    fi
    
    if [ ${#FAILED_QMD[@]} -gt 0 ]; then
        echo "‚ùå Fichiers Quarto √©chou√©s (${#FAILED_QMD[@]} / ${#QMD_FILES[@]}):"
        for f in "${FAILED_QMD[@]}"; do echo "   - $f"; done
        echo ""
    else
        echo "‚úÖ Fichiers Quarto: tous r√©ussis (${#QMD_FILES[@]} / ${#QMD_FILES[@]})"
    fi
    
    if [ "$FAILED_GIT" = true ]; then
        echo "‚ùå Op√©rations Git: √©chou√©es"
    else
        echo "‚úÖ Op√©rations Git: r√©ussies"
    fi
fi

echo ""
echo "üìÖ Fin d'ex√©cution: $(date)"
echo "üîö Script termin√©."

# Code de sortie bas√© sur le succ√®s global
if [ "$TOTAL_SUCCESS" = true ]; then
    exit 0
else
    exit 1
fi
