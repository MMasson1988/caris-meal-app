#!/bin/bash

# ================================
# üöÄ SCRIPT D'EX√âCUTION AUTOMATIQUE
# - 3 scripts Python
# - 3 fichiers Quarto
# - Op√©rations Git automatiques
# - Gestion des erreurs par fichier
# ================================

echo "üîÅ D√©but de l'ex√©cution globale"
echo "üìÖ Date : $(date)"
echo "-------------------------------"

# ========== PYTHON ==========
echo "üêç [1/3] Ex√©cution des scripts Python..."

PY_SCRIPTS=("oev_pipeline.py" "ptme_pipeline.py" "garden_pipeline.py" "muso_pipeline.py")
FAILED_PY=()

for file in "${PY_SCRIPTS[@]}"; do
    echo "‚öôÔ∏è Ex√©cution : $file"
    
    # Remplacer python3 par python (compatible Windows)
    python "$file"
    
    if [ $? -ne 0 ]; then
        echo "‚ùå √âchec : $file"
        FAILED_PY+=("$file")
    else
        echo "‚úÖ Succ√®s : $file"
    fi
done

# ========== QUARTO ==========
echo ""
echo "üìù [2/3] Rendu des fichiers Quarto..."

QMD_FILES=("tracking-ptme.qmd" "tracking-oev.qmd" "tracking-gardening.qmd" "tracking-muso.qmd")
FAILED_QMD=()

for file in "${QMD_FILES[@]}"; do
    echo "üìÑ Rendu : $file"
    quarto render "$file"
    if [ $? -ne 0 ]; then
        echo "‚ùå √âchec : $file"
        FAILED_QMD+=("$file")
    else
        echo "‚úÖ Succ√®s : $file"
    fi
done

# ========== GIT OPERATIONS ==========
echo ""
echo "üìù [3/3] Op√©rations Git..."

# V√©rifier si on est dans un repository Git
if git rev-parse --git-dir > /dev/null 2>&1; then
    echo "‚úÖ Repository Git d√©tect√©"
    
    # Obtenir la date du jour
    DATE_TODAY=$(date +"%Y-%m-%d")
    COMMIT_MESSAGE="Mon commit du $DATE_TODAY"
    
    # V√©rifier si le r√©pertoire _site existe
    if [ ! -d "_site" ]; then
        echo "‚ö†Ô∏è R√©pertoire _site inexistant, cr√©ation..."
        mkdir -p "_site"
        echo "# Generated site files" > "_site/.gitkeep"
    fi
    
    # V√©rifier s'il y a des fichiers dans _site
    if [ -z "$(ls -A _site 2>/dev/null)" ]; then
        echo "‚ö†Ô∏è R√©pertoire _site vide, ajout d'un fichier .gitkeep"
        echo "# Generated site files" > "_site/.gitkeep"
    fi
    
    echo "üìÅ Ajout du r√©pertoire _site √† Git..."
    git add _site
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ git add _site r√©ussi"
        
        # V√©rifier s'il y a des changements √† commiter
        if git diff --cached --quiet; then
            echo "‚ÑπÔ∏è Aucun changement √† commiter dans _site"
        else
            echo "üíæ Commit avec le message: '$COMMIT_MESSAGE'"
            git commit -m "$COMMIT_MESSAGE"
            
            if [ $? -eq 0 ]; then
                echo "‚úÖ Git commit r√©ussi"
                echo "üìù Message: $COMMIT_MESSAGE"
                
                # Afficher le hash du commit
                COMMIT_HASH=$(git rev-parse --short HEAD)
                echo "üîó Hash du commit: $COMMIT_HASH"
                
                # Optionnel : proposer un push
                echo ""
                echo "üí° Pour pousser vers le repository distant, ex√©cutez:"
                echo "   git push origin $(git branch --show-current)"
            else
                echo "‚ùå √âchec du git commit"
                FAILED_GIT=true
            fi
        fi
    else
        echo "‚ùå √âchec de git add _site"
        FAILED_GIT=true
    fi
else
    echo "‚ö†Ô∏è Pas un repository Git - op√©rations Git ignor√©es"
    echo "üí° Pour initialiser un repo Git, ex√©cutez: git init"
    FAILED_GIT=false  # Pas une vraie erreur
fi

# ========== RAPPORT FINAL ==========
echo ""
echo "==============================="
echo "üìã RAPPORT D'EX√âCUTION FINALE"
echo "==============================="

# Compter les succ√®s et √©checs
TOTAL_SUCCESS=true

if [ ${#FAILED_PY[@]} -eq 0 ] && [ ${#FAILED_QMD[@]} -eq 0 ] && [ "$FAILED_GIT" != true ]; then
    echo "üéâ Tous les processus ont √©t√© ex√©cut√©s avec succ√®s!"
    echo ""
    echo "üìä R√©sum√©:"
    echo "   ‚úÖ Scripts Python: ${#PY_SCRIPTS[@]} r√©ussis"
    echo "   ‚úÖ Fichiers Quarto: ${#QMD_FILES[@]} rendus"
    echo "   ‚úÖ Op√©rations Git: termin√©es"
else
    TOTAL_SUCCESS=false
    echo "‚ö†Ô∏è Certains processus ont √©chou√©:"
    echo ""
    
    if [ ${#FAILED_PY[@]} -gt 0 ]; then
        echo "‚ùå Scripts Python √©chou√©s (${#FAILED_PY[@]}/${#PY_SCRIPTS[@]}):"
        for f in "${FAILED_PY[@]}"; do echo "   - $f"; done
        echo ""
    else
        echo "‚úÖ Scripts Python: tous r√©ussis (${#PY_SCRIPTS[@]}/${#PY_SCRIPTS[@]})"
    fi
    
    if [ ${#FAILED_QMD[@]} -gt 0 ]; then
        echo "‚ùå Fichiers Quarto √©chou√©s (${#FAILED_QMD[@]}/${#QMD_FILES[@]}):"
        for f in "${FAILED_QMD[@]}"; do echo "   - $f"; done
        echo ""
    else
        echo "‚úÖ Fichiers Quarto: tous r√©ussis (${#QMD_FILES[@]}/${#QMD_FILES[@]})"
    fi
    
    if [ "$FAILED_GIT" = true ]; then
        echo "‚ùå Op√©rations Git: √©chou√©es"
    else
        echo "‚úÖ Op√©rations Git: r√©ussies"
    fi
fi

echo ""
echo "üìÖ Fin d'ex√©cution: $(date)"
echo "üîö Script termin√©."

# Code de sortie bas√© sur le succ√®s global
if [ "$TOTAL_SUCCESS" = true ]; then
    exit 0
else
    exit 1
fi