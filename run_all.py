#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script d'ex√©cution de run_all.sh avec gestion des erreurs Quarto/R et Git
Auteur: CARIS Dashboard Team
Date: 2025
"""

import os
import sys
import subprocess
import platform
import time
import shutil
from pathlib import Path
from datetime import datetime

def check_quarto_installation():
    """V√©rifie si Quarto est install√© et accessible."""
    try:
        result = subprocess.run(['quarto', '--version'], 
                              capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            print(f"‚úÖ Quarto install√©: {result.stdout.strip()}")
            return True
        else:
            print("‚ùå Quarto non accessible")
            return False
    except (subprocess.TimeoutExpired, FileNotFoundError):
        print("‚ùå Quarto non trouv√© dans le PATH")
        return False

def check_r_installation():
    """V√©rifie si R est install√© et accessible."""
    try:
        result = subprocess.run(['R', '--version'], 
                              capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            print(f"‚úÖ R install√©: {result.stdout.split(chr(10))[0]}")  # Fix: chr(10) au lieu de \\n
            return True
        else:
            print("‚ùå R non accessible")
            return False
    except (subprocess.TimeoutExpired, FileNotFoundError):
        print("‚ùå R non trouv√© dans le PATH")
        return False

def check_git_installation():
    """V√©rifie si Git est install√© et accessible."""
    try:
        result = subprocess.run(['git', '--version'], 
                              capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            print(f"‚úÖ Git install√©: {result.stdout.strip()}")
            return True
        else:
            print("‚ùå Git non accessible")
            return False
    except (subprocess.TimeoutExpired, FileNotFoundError):
        print("‚ùå Git non trouv√© dans le PATH")
        return False

def check_git_repo():
    """V√©rifie si le r√©pertoire courant est un repo Git."""
    try:
        result = subprocess.run(['git', 'status'], 
                              capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            print("‚úÖ R√©pertoire Git valide")
            return True
        else:
            print("‚ùå Pas un r√©pertoire Git valide")
            return False
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification du repo Git: {e}")
        return False

def git_commit_site():
    """Ex√©cute git add _site et git commit avec la date du jour."""
    try:
        # Obtenir la date du jour
        today = datetime.now().strftime('%Y-%m-%d')
        commit_message = f"Mon commit du {today}"
        
        print("üìÅ Ajout du r√©pertoire _site √† Git...")
        
        # V√©rifier si le r√©pertoire _site existe
        site_path = Path("_site")
        if not site_path.exists():
            print("‚ö†Ô∏è Le r√©pertoire _site n'existe pas. Cr√©ation d'un r√©pertoire vide...")
            site_path.mkdir(exist_ok=True)
            # Cr√©er un fichier .gitkeep pour permettre l'ajout du r√©pertoire
            (site_path / ".gitkeep").touch()
        
        # V√©rifier s'il y a des fichiers dans _site
        site_files = list(site_path.glob('*'))
        if not site_files:
            print("‚ö†Ô∏è Le r√©pertoire _site est vide. Ajout d'un fichier .gitkeep")
            (site_path / ".gitkeep").touch()
        
        # Git add _site
        result_add = subprocess.run(['git', 'add', '_site'], 
                                  capture_output=True, text=True, timeout=30)
        
        if result_add.returncode != 0:
            print(f"‚ùå Erreur lors de git add: {result_add.stderr}")
            return False
        
        print("‚úÖ git add _site r√©ussi")
        
        # V√©rifier s'il y a des changements √† commiter
        result_status = subprocess.run(['git', 'status', '--porcelain'], 
                                     capture_output=True, text=True, timeout=10)
        
        if not result_status.stdout.strip():
            print("‚ÑπÔ∏è Aucun changement √† commiter")
            return True
        
        print(f"üíæ Commit avec le message: '{commit_message}'")
        
        # Git commit
        result_commit = subprocess.run(['git', 'commit', '-m', commit_message], 
                                     capture_output=True, text=True, timeout=30)
        
        if result_commit.returncode == 0:
            print("‚úÖ Git commit r√©ussi")
            print(f"üìù Message: {commit_message}")
            
            # Afficher un r√©sum√© du commit
            if result_commit.stdout:
                print(f"üìä R√©sum√©: {result_commit.stdout.strip()}")
            
            return True
        else:
            print(f"‚ùå Erreur lors du commit: {result_commit.stderr}")
            return False
            
    except subprocess.TimeoutExpired:
        print("‚è∞ Timeout lors des op√©rations Git")
        return False
    except Exception as e:
        print(f"‚ùå Erreur lors des op√©rations Git: {e}")
        return False

def find_r_executable():
    """Trouve l'ex√©cutable R sur le syst√®me."""
    possible_paths = []
    
    if platform.system() == "Windows":
        # Chemins possibles pour R sur Windows
        possible_paths = [
            r"C:\Program Files\R\R-4.4.1\bin\R.exe",
            r"C:\Program Files\R\R-4.3.3\bin\R.exe",
            r"C:\Program Files\R\R-4.3.2\bin\R.exe",
            r"C:\Program Files\R\R-4.3.1\bin\R.exe",
            r"C:\Program Files\R\R-4.2.3\bin\R.exe",
        ]
        
        # Recherche automatique dans Program Files
        program_files = Path("C:/Program Files/R")
        if program_files.exists():
            for r_dir in sorted(program_files.glob("R-*"), reverse=True):  # Plus r√©cent en premier
                r_exe = r_dir / "bin" / "R.exe"
                if r_exe.exists():
                    possible_paths.insert(0, str(r_exe))  # Ajouter en d√©but de liste
    
    else:  # Linux/Mac
        possible_paths = [
            "/usr/bin/R",
            "/usr/local/bin/R",
            "/opt/R/bin/R"
        ]
    
    # Chercher R dans le PATH en premier
    r_in_path = shutil.which("R")
    if r_in_path:
        print(f"‚úÖ R trouv√© dans le PATH: {r_in_path}")
        return r_in_path
    
    # Sinon, chercher dans les chemins possibles
    for path in possible_paths:
        if Path(path).exists():
            print(f"‚úÖ R trouv√© √†: {path}")
            return path
    
    print("‚ùå R non trouv√©")
    return None

def configure_quarto_r():
    """Configure le chemin R pour Quarto."""
    print("üîß Configuration de Quarto avec R...")
    
    r_path = find_r_executable()
    if not r_path:
        print("‚ùå Impossible de trouver l'installation R")
        return False
    
    try:
        # D√©finir la variable d'environnement QUARTO_R
        os.environ['QUARTO_R'] = r_path
        
        # Configurer Quarto (uniquement sur Windows)
        if platform.system() == "Windows":
            try:
                subprocess.run(['setx', 'QUARTO_R', r_path], 
                             capture_output=True, check=False, timeout=30)
            except subprocess.TimeoutExpired:
                print("‚ö†Ô∏è Timeout lors de setx, mais variable d'environnement d√©finie")
        
        print(f"‚úÖ QUARTO_R configur√©: {r_path}")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la configuration: {e}")
        return False

def run_python_pipelines():
    """Ex√©cute les pipelines Python avant les rapports Quarto."""
    pipelines = [
        "oev_pipeline.py",
        "ptme_pipeline.py", 
        "muso_pipeline.py",
        "garden_pipeline.py"
    ]
    
    print("üêç Ex√©cution des pipelines Python...")
    
    for pipeline in pipelines:
        if Path(pipeline).exists():
            print(f"üîÑ Ex√©cution de {pipeline}...")
            try:
                result = subprocess.run(
                    [sys.executable, pipeline],
                    capture_output=True,
                    text=True,
                    timeout=600  # 10 minutes par pipeline
                )
                
                if result.returncode == 0:
                    print(f"‚úÖ {pipeline} termin√© avec succ√®s")
                else:
                    print(f"‚ö†Ô∏è {pipeline} termin√© avec des avertissements")
                    if result.stderr:
                        print(f"Erreurs: {result.stderr[:200]}...")
                        
            except subprocess.TimeoutExpired:
                print(f"‚è∞ Timeout pour {pipeline}")
                return False
            except Exception as e:
                print(f"‚ùå Erreur lors de l'ex√©cution de {pipeline}: {e}")
                return False
        else:
            print(f"‚ö†Ô∏è Pipeline {pipeline} non trouv√©")
    
    return True

def run_quarto_reports():
    """Ex√©cute les rapports Quarto."""
    qmd_files = [
        "tracking-oev.qmd",
        "tracking-ptme.qmd",
        "tracking-muso.qmd",
        "tracking-gardening.qmd"
    ]
    
    print("üìä G√©n√©ration des rapports Quarto...")
    
    for qmd_file in qmd_files:
        if Path(qmd_file).exists():
            print(f"üìÑ Rendu de {qmd_file}...")
            try:
                result = subprocess.run(
                    ['quarto', 'render', qmd_file],
                    capture_output=True,
                    text=True,
                    timeout=300  # 5 minutes par rapport
                )
                
                if result.returncode == 0:
                    print(f"‚úÖ {qmd_file} rendu avec succ√®s")
                else:
                    print(f"‚ùå Erreur lors du rendu de {qmd_file}")
                    if result.stderr:
                        print(f"Erreurs: {result.stderr[:200]}...")
                    return False
                    
            except subprocess.TimeoutExpired:
                print(f"‚è∞ Timeout pour {qmd_file}")
                return False
            except Exception as e:
                print(f"‚ùå Erreur lors du rendu de {qmd_file}: {e}")
                return False
        else:
            print(f"‚ö†Ô∏è Fichier {qmd_file} non trouv√©")
    
    return True

def run_shell_script():
    """Ex√©cute le script run_all.sh selon le syst√®me d'exploitation."""
    script_path = "./run_all.sh"
    
    # V√©rifier si le script existe
    if not Path(script_path).exists():
        print(f"‚ùå Script non trouv√©: {script_path}")
        print("üîÑ Ex√©cution des √©tapes manuellement...")
        
        # Ex√©cuter manuellement les √©tapes
        success = True
        success &= run_python_pipelines()
        if success:
            success &= run_quarto_reports()
        
        return success
    
    try:
        print("üöÄ Ex√©cution de run_all.sh...")
        print("=" * 50)
        
        if platform.system() == "Windows":
            # Sur Windows, utiliser Git Bash, WSL ou PowerShell
            commands_to_try = [
                ["bash", script_path],
                ["wsl", "bash", script_path],
                ["powershell", "-Command", f"& '{script_path}'"],
                ["cmd", "/c", script_path.replace('./run_all.sh', 'run_all.bat')]  # Au cas o√π il y aurait un .bat
            ]
            
            for cmd in commands_to_try:
                try:
                    print(f"Tentative avec: {' '.join(cmd)}")
                    result = subprocess.run(
                        cmd,
                        cwd=os.getcwd(),
                        capture_output=False,
                        text=True,
                        timeout=1800  # 30 minutes timeout
                    )
                    
                    if result.returncode == 0:
                        print("‚úÖ Script ex√©cut√© avec succ√®s!")
                        return True
                    else:
                        print(f"‚ö†Ô∏è Script termin√© avec code: {result.returncode}")
                        continue
                        
                except FileNotFoundError:
                    print(f"‚ùå Commande non trouv√©e: {cmd[0]}")
                    continue
                except subprocess.TimeoutExpired:
                    print("‚è∞ Timeout - le script prend trop de temps")
                    return False
            
            print("‚ùå Impossible d'ex√©cuter le script sur Windows")
            print("üîÑ Tentative d'ex√©cution manuelle...")
            success = True
            success &= run_python_pipelines()
            if success:
                success &= run_quarto_reports()
            return success
            
        else:  # Linux/Mac
            # Rendre le script ex√©cutable
            subprocess.run(['chmod', '+x', script_path], check=False)
            
            result = subprocess.run(
                [script_path],
                cwd=os.getcwd(),
                capture_output=False,
                text=True,
                timeout=1800  # 30 minutes timeout
            )
            
            if result.returncode == 0:
                print("‚úÖ Script ex√©cut√© avec succ√®s!")
                return True
            else:
                print(f"‚ùå Script termin√© avec code d'erreur: {result.returncode}")
                return False
                
    except subprocess.TimeoutExpired:
        print("‚è∞ Timeout - le script prend trop de temps √† s'ex√©cuter")
        return False
    except Exception as e:
        print(f"‚ùå Erreur lors de l'ex√©cution: {e}")
        return False

def main():
    """Fonction principale."""
    print("üîÑ CARIS Dashboard - Ex√©cution compl√®te avec Git")
    print("=" * 60)
    
    # Changer vers le r√©pertoire du script
    script_dir = Path(__file__).parent
    original_dir = os.getcwd()
    
    try:
        os.chdir(script_dir)
        print(f"üìÅ R√©pertoire de travail: {os.getcwd()}")
        
        # V√©rifications pr√©liminaires
        print("\nüîç V√©rification des d√©pendances...")
        
        quarto_ok = check_quarto_installation()
        r_ok = check_r_installation()
        git_ok = check_git_installation()
        git_repo_ok = check_git_repo() if git_ok else False
        
        # Si R n'est pas accessible, essayer de le configurer
        if not r_ok:
            print("\nüîß Tentative de configuration de R...")
            if not configure_quarto_r():
                print("‚ùå Impossible de configurer R. Veuillez installer R ou v√©rifier le PATH.")
                return 1
            # Rev√©rifier R apr√®s configuration
            r_ok = check_r_installation()
        
        # Si Quarto n'est pas accessible, essayer de le configurer
        if not quarto_ok:
            print("\nüîß Tentative de configuration de Quarto...")
            configure_quarto_r()
            
            # V√©rifier √† nouveau
            quarto_ok = check_quarto_installation()
            if not quarto_ok:
                print("‚ùå Impossible de configurer Quarto. Veuillez installer Quarto.")
                return 1
        
        if not git_ok:
            print("‚ö†Ô∏è Git n'est pas install√©. Les op√©rations Git seront ignor√©es.")
        elif not git_repo_ok:
            print("‚ö†Ô∏è Ce r√©pertoire n'est pas un repo Git. Les op√©rations Git seront ignor√©es.")
        
        print("\n‚úÖ V√©rifications termin√©es!")
        
        # Pause avant ex√©cution
        print("\n‚è≥ D√©marrage dans 3 secondes...")
        time.sleep(3)
        
        # Ex√©cuter le script principal
        print("\n" + "="*60)
        print("üöÄ √âTAPE 1: Ex√©cution des pipelines et rapports")
        print("="*60)
        
        success = run_shell_script()
        
        if not success:
            print("\nüí• √âchec de l'ex√©cution du script principal")
            print("üîß V√©rifiez les logs ci-dessus pour plus de d√©tails.")
            return 1
        
        # Op√©rations Git
        if git_ok and git_repo_ok:
            print("\n" + "="*60)
            print("üìù √âTAPE 2: Op√©rations Git")
            print("="*60)
            
            git_success = git_commit_site()
            
            if git_success:
                print("‚úÖ Op√©rations Git termin√©es avec succ√®s!")
            else:
                print("‚ö†Ô∏è Erreur lors des op√©rations Git (non critique)")
        else:
            print("\n‚ö†Ô∏è Op√©rations Git ignor√©es (Git non disponible ou repo invalide)")
        
        print("\n" + "="*60)
        print("üéâ PROCESSUS TERMIN√â AVEC SUCC√àS!")
        print("="*60)
        print("üìä Les rapports ont √©t√© g√©n√©r√©s dans le r√©pertoire courant.")
        if git_ok and git_repo_ok:
            print("üìù Les changements ont √©t√© ajout√©s au contr√¥le de version Git.")
        
        return 0
        
    finally:
        # Restaurer le r√©pertoire original
        os.chdir(original_dir)

if __name__ == "__main__":
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        print("\n\n‚õî Interruption par l'utilisateur")
        sys.exit(130)
    except Exception as e:
        print(f"\nüí• Erreur inattendue: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)